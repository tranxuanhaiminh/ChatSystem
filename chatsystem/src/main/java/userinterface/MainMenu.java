/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package userinterface;

import javax.swing.ListSelectionModel;

import entities.Contact;
import entities.ContactList;
import network.IpAddress;
import network.UDPSend;
import ressources.Interfacedisplay;
import service.Action;
import service.DbService;

import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;

import javax.swing.ImageIcon;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Minh
 */
public class MainMenu extends javax.swing.JFrame {

	/* Fields */
	private static final long serialVersionUID = 1L;
	private final static String disconnected = "Images/gray.png";
	private final static String connected = "Images/green.png";

	/**
	 * Creates new form MainMenu
	 */
	public MainMenu() {
		initComponents();

		// Add connected users
		for (Contact c : ContactList.getList()) {
			addUser(c.getPseudo(), true);
		}

		// Add offline users
		DbService.getOfflineContacts();
		for (Contact contact : ContactList.getOffline()) {
			addUser(contact.getPseudo(), false);
		}

		setVisible(true);
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
//	@SuppressWarnings("unchecked")
	@SuppressWarnings("serial")
	// <editor-fold defaultstate="collapsed" desc="Generated
	// Code">//GEN-BEGIN:initComponents
	private void initComponents() {
		setTitle(Interfacedisplay.mainmenutitle);

		jLabel1 = new javax.swing.JLabel();
		jButton1 = new javax.swing.JButton();
		jScrollPane1 = new javax.swing.JScrollPane();
		jTable1 = new javax.swing.JTable();

		jTable1.setModel(new javax.swing.table.DefaultTableModel(new Object[][] {},
				new String[] { Interfacedisplay.tablestatuscol, Interfacedisplay.tableusercol }) {
			public Class<? extends Object> getColumnClass(int column) {
				return getValueAt(0, column).getClass();
			}

			boolean[] canEdit = new boolean[] { false, false };

			public boolean isCellEditable(int rowIndex, int columnIndex) {
				return canEdit[columnIndex];
			}
		});

		jLabel1.setText(ContactList.getMe().getPseudo());
		jButton1.setText(Interfacedisplay.modifybutton);
		jButton1.addActionListener(new Action());

		jTable1.setColumnSelectionInterval(1, 1);
		jTable1.setCellSelectionEnabled(true);
		jTable1.setColumnSelectionAllowed(false);
		jTable1.setRowSelectionAllowed(false);
		jTable1.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
		ListSelectionModel listSelectionModel = jTable1.getSelectionModel();
		listSelectionModel.addListSelectionListener(new Action());

		jTable1.setRowHeight(20);
		jTable1.setShowGrid(true);
		jScrollPane1.setViewportView(jTable1);
		if (jTable1.getColumnModel().getColumnCount() > 0) {
			jTable1.getColumnModel().getColumn(0).setMinWidth(55);
			jTable1.getColumnModel().getColumn(0).setPreferredWidth(55);
			jTable1.getColumnModel().getColumn(0).setMaxWidth(55);
			jTable1.getColumnModel().getColumn(1).setResizable(false);
			jTable1.getColumnModel().getColumn(1).setPreferredWidth(1000);
		}

		javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
		getContentPane().setLayout(layout);
		layout.setHorizontalGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(layout.createSequentialGroup().addContainerGap()
						.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
								.addGroup(layout.createSequentialGroup().addComponent(jLabel1)
										.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
										.addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 70,
												javax.swing.GroupLayout.PREFERRED_SIZE)
										.addGap(0, 0, Short.MAX_VALUE))
								.addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 471, Short.MAX_VALUE))
						.addContainerGap()));
		layout.setVerticalGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(layout.createSequentialGroup().addContainerGap()
						.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
								.addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE,
										javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
								.addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, 24, Short.MAX_VALUE))
						.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
						.addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 270, Short.MAX_VALUE)
						.addContainerGap()));

		// Signal other of the disconnection and exit program when closing the main menu
		// window
		addWindowListener(new WindowAdapter() {

			public void windowClosing(WindowEvent e) {

				// Telling everybody that we are disconnecting
				UDPSend.send("DC", IpAddress.getBroadcast());
				System.exit(0);
			}
		});

		pack();

		this.setLocationRelativeTo(null);
	}// </editor-fold>//GEN-END:initComponents

	// Variables declaration - do not modify//GEN-BEGIN:variables
	private javax.swing.JButton jButton1;
	private static javax.swing.JLabel jLabel1;
	private javax.swing.JScrollPane jScrollPane1;
	private static javax.swing.JTable jTable1;
	// End of variables declaration//GEN-END:variables

	/**
	 * Add new user to the table
	 * 
	 * @param username
	 * @param connecting
	 */
	public static void addUser(String username, boolean connecting) {
		// Get table model for data manipulation
		DefaultTableModel model = (DefaultTableModel) jTable1.getModel();

		// Create Image according to the user's connetion state (connected/disconnected)
		String img = connecting ? connected : disconnected;
		ImageIcon imgicon = new ImageIcon(
				new ImageIcon(img).getImage().getScaledInstance(10, 10, java.awt.Image.SCALE_SMOOTH));
		imgicon.setDescription(img);

		if (connecting) {
			int i;
			// Find the table's row containing the last connected user
			for (i = 0; i < jTable1.getRowCount(); i++) {
				if (!img.equals(model.getValueAt(i, 0).toString())) {
					break;
				}
			}
			// Add user
			model.insertRow(i, new Object[] { imgicon, username });
		} else {
			// Add user to the bottom of the table
			model.addRow(new Object[] { imgicon, username });
		}
	}

	/**
	 * Remove user from the table
	 * 
	 * @param username
	 */
	public static void removeUser(String username) {
		// Get table model for data manipulation
		DefaultTableModel model = (DefaultTableModel) jTable1.getModel();

		// Get index position
		int i = getIndex(username);

		// Remove user
		model.removeRow(i);
	}

	/**
	 * Modify user's state on the table
	 * 
	 * @param newname
	 * @param oldname
	 * @param connecting
	 */
	public static void modUser(String oldname, String newname, boolean connecting) {
		// Get table model for data manipulation
		DefaultTableModel model = (DefaultTableModel) jTable1.getModel();

		// Get index position
		int i = getIndex(oldname);

		// Create Image according to the user's connetion state (connected/disconnected)
		String img = connecting ? connected : disconnected;
		if (!img.equals(model.getValueAt(i, 0).toString())) {
			ImageIcon imgicon = new ImageIcon(
					new ImageIcon(img).getImage().getScaledInstance(10, 10, java.awt.Image.SCALE_SMOOTH));
			imgicon.setDescription(img);

			// Modify user's state
			model.setValueAt(imgicon, i, 0);
		}

		if (!oldname.equals(newname)) {
			// Modify user's name
			model.setValueAt(newname, i, 1);
		}
	}

	/**
	 * Get the pseudo from the table with specified index
	 * 
	 * @param index
	 */
	public static String getPseudo(int index) {
		// Get table model for data manipulation
		DefaultTableModel model = (DefaultTableModel) jTable1.getModel();

		// Get the pseudo at the index position
		String pseudo = (String) model.getValueAt(index, 1);
		return pseudo.replace("<html><b>", "").replace("</b></html>", "");
	}

	/**
	 * Set the usernamelabel
	 * 
	 * @param pseudo
	 */
	public static void setUsernameLabel(String pseudo) {
		jLabel1.setText(pseudo);
	}

	/**
	 * Notify user about new messages by bolding the table row
	 * 
	 * @param pseudo
	 */
	public static void notifyMessage(String pseudo) {
		// Get table model for data manipulation
		DefaultTableModel model = (DefaultTableModel) jTable1.getModel();

		// Get index position
		int i = getIndex(pseudo);

		// Set text to bold
		model.setValueAt("<html><b>" + model.getValueAt(i, 1) + "</b></html>", i, 1);
	}

	/**
	 * Unbold the table row
	 * 
	 * @param pseudo
	 */
	public static void undoMessageNoti(int i) {
		// Get table model for data manipulation
		DefaultTableModel model = (DefaultTableModel) jTable1.getModel();

		// Set text to bold
		String pseudo = (String) model.getValueAt(i, 1);
		model.setValueAt(pseudo.replace("<html><b>", "").replace("</b></html>", ""), i, 1);
	}

	/**
	 * Get the table's row index of the username
	 * 
	 * @param pseudo
	 * @return int
	 */
	private static int getIndex(String pseudo) {
		// Get table model for data manipulation
		DefaultTableModel model = (DefaultTableModel) jTable1.getModel();

		// Find the table's row containing the user
		for (int i = 0; i < jTable1.getRowCount(); i++) {
			if (pseudo.equals(model.getValueAt(i, 1))) {
				return i;
			}
		}
		return -1;
	}
}